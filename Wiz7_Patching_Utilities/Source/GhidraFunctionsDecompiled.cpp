/*
  ==============================================================================

    GhidraFunctions.cpp
    Created: 1 Aug 2024 4:22:50am
    Author:  Zaq

  ==============================================================================
*/

#include "GhidraFunctionsDecompiled.h"
#include <JuceHeader.h>
#include <string>
#include <iostream>
#include "HuffmanTable.h"

using namespace juce;
using namespace std;


char DAT_MISC[0x1E4] = { 0x20,0x00,0xFF,0xFF,0xFE,0xFF,0xF5,0xFF,0xFD,0xFF,0xFC,0xFF,0x65,0x00,0x74,0x00,0xFB,0xFF,0xFA,0xFF,0x6F,0x00,0x61,0x00,0xF9,0xFF,0xF8,0xFF,0x6E,0x00,0x73,0x00,0xF7,0xFF,0xF6,0xFF,0x69,0x00,0x72,0x00,0x68,0x00,0x6C,0x00,0xF4,0xFF,0xE9,0xFF,0xF3,0xFF,0xF2,0xFF,0x2E,0x00,0x64,0x00,0xF1,0xFF,0xF0,0xFF,0x75,0x00,0x66,0x00,0xEF,0xFF,0xEE,0xFF,0x63,0x00,0x67,0x00,0xED,0xFF,0xEC,0xFF,0x79,0x00,0x6D,0x00,0xEB,0xFF,0xEA,0xFF,0x70,0x00,0x77,0x00,0x45,0x00,0x54,0x00,0xE8,0xFF,0xDD,0xFF,0xE7,0xFF,0xE6,0xFF,0x41,0x00,0x2C,0x00,0xE5,0xFF,0xE4,0xFF,0x62,0x00,0x53,0x00,0xE3,0xFF,0xE2,0xFF,0x49,0x00,0x52,0x00,0xE1,0xFF,0xE0,0xFF,0x4F,0x00,0x6B,0x00,0xDF,0xFF,0xDE,0xFF,0x4E,0x00,0x76,0x00,0x21,0x00,0x48,0x00,0xDC,0xFF,0xD3,0xFF,0xDB,0xFF,0xDA,0xFF,0x4C,0x00,0x25,0x00,0xD9,0xFF,0xD8,0xFF,0x26,0x00,0x44,0x00,0xD7,0xFF,0xD6,0xFF,0x5D,0x00,0x43,0x00,0xD5,0xFF,0xD4,0xFF,0x2D,0x00,0x55,0x00,0x40,0x00,0x4D,0x00,0xD2,0xFF,0xCB,0xFF,0xD1,0xFF,0xD0,0xFF,0x59,0x00,0x47,0x00,0xCF,0xFF,0xCE,0xFF,0x50,0x00,0x42,0x00,0xCD,0xFF,0xCC,0xFF,0x57,0x00,0x46,0x00,0x27,0x00,0x01,0x00,0xCA,0xFF,0xBF,0xFF,0xC9,0xFF,0xC8,0xFF,0x4B,0x00,0x2F,0x00,0xC7,0xFF,0xC6,0xFF,0x3F,0x00,0x56,0x00,0xC5,0xFF,0xC4,0xFF,0x7A,0x00,0x24,0x00,0xC3,0xFF,0xC2,0xFF,0x02,0x00,0x71,0x00,0xC1,0xFF,0xC0,0xFF,0x30,0x00,0x3A,0x00,0x78,0x00,0x23,0x00,0xBE,0xFF,0xB3,0xFF,0xBD,0xFF,0xBC,0xFF,0x22,0x00,0x03,0x00,0xBB,0xFF,0xBA,0xFF,0x6A,0x00,0x2A,0x00,0xB9,0xFF,0xB8,0xFF,0x1F,0x00,0x58,0x00,0xB7,0xFF,0xB6,0xFF,0x05,0x00,0x5E,0x00,0xB5,0xFF,0xB4,0xFF,0x31,0x00,0x4A,0x00,0x29,0x00,0x28,0x00,0xB2,0xFF,0xA9,0xFF,0xB1,0xFF,0xB0,0xFF,0x04,0x00,0x08,0x00,0xAF,0xFF,0xAE,0xFF,0x06,0x00,0x32,0x00,0xAD,0xFF,0xAC,0xFF,0x35,0x00,0x5A,0x00,0xAB,0xFF,0xAA,0xFF,0x0C,0x00,0x51,0x00,0x5F,0x00,0x34,0x00,0xA8,0xFF,0xA1,0xFF,0xA7,0xFF,0xA6,0xFF,0x7E,0x00,0x0A,0x00,0xA5,0xFF,0xA4,0xFF,0x33,0x00,0x07,0x00,0xA3,0xFF,0xA2,0xFF,0x09,0x00,0x38,0x00,0x0B,0x00,0x36,0x00,0xA0,0xFF,0x9B,0xFF,0x9F,0xFF,0x9E,0xFF,0x37,0x00,0x0F,0x00,0x9D,0xFF,0x9C,0xFF,0x39,0x00,0x1E,0x00,0x3B,0x00,0x0D,0x00,0x9A,0xFF,0x95,0xFF,0x99,0xFF,0x98,0xFF,0x2B,0x00,0x0E,0x00,0x97,0xFF,0x96,0xFF,0x12,0x00,0x11,0x00,0x14,0x00,0x10,0x00,0x94,0xFF,0x8F,0xFF,0x93,0xFF,0x92,0xFF,0x5B,0x00,0x13,0x00,0x91,0xFF,0x90,0xFF,0x7D,0x00,0x7C,0x00,0x1D,0x00,0x3D,0x00,0x8E,0xFF,0x8B,0xFF,0x8D,0xFF,0x8C,0xFF,0x1B,0x00,0x1A,0x00,0x19,0x00,0x15,0x00,0x8A,0xFF,0x89,0xFF,0x3E,0x00,0x16,0x00,0x7F,0x00,0x88,0xFF,0x1C,0x00,0x17,0x00 };
char DAT_MISCJ[0x400] = { 0xFE, 0xFF, 0xFF, 0xFF, 0x81, 0x00, 0xFD, 0xFF, 0xFB, 0xFF, 0xFC, 0xFF, 0xF9, 0xFF, 0xFA, 0xFF, 0xF7, 0xFF, 0xF8, 0xFF, 0xF5, 0xFF, 0xF6, 0xFF, 0xF3, 0xFF, 0xF4, 0xFF, 0xF1, 0xFF, 0xF2, 0xFF, 0xEF, 0xFF, 0xF0, 0xFF, 0xEE, 0xFF, 0x80, 0x00, 0xEC, 0xFF, 0xED, 0xFF, 0xEA, 0xFF, 0xEB, 0xFF, 0xE8, 0xFF, 0xE9, 0xFF, 0xE6, 0xFF, 0xE7, 0xFF, 0x20, 0x00, 0xE5, 0xFF, 0xE3, 0xFF, 0xE4, 0xFF, 0xE1, 0xFF, 0xE2, 0xFF, 0xDF, 0xFF, 0xE0, 0xFF, 0xDD, 0xFF, 0xDE, 0xFF, 0xDB, 0xFF, 0xDC, 0xFF, 0x82, 0x00, 0xDA, 0xFF, 0xD8, 0xFF, 0xD9, 0xFF, 0xD6, 0xFF, 0xD7, 0xFF, 0xD5, 0xFF, 0x55, 0x00, 0xD3, 0xFF, 0xD4, 0xFF, 0xD1, 0xFF, 0xD2, 0xFF, 0xCF, 0xFF, 0xD0, 0xFF, 0xCD, 0xFF, 0xCE, 0xFF, 0x32, 0x00, 0xCC, 0xFF, 0x47, 0x00, 0xCB, 0xFF, 0xC9, 0xFF, 0xCA, 0xFF, 0xC7, 0xFF, 0xC8, 0xFF, 0xC6, 0xFF, 0xDC, 0x00, 0xC4, 0xFF, 0xC5, 0xFF, 0xC2, 0xFF, 0xC3, 0xFF, 0xC1, 0xFF, 0x52, 0x00, 0xC0, 0xFF, 0x3F, 0x00, 0xBF, 0xFF, 0x4D, 0x00, 0xBE, 0xFF, 0x56, 0x00, 0xBC, 0xFF, 0xBD, 0xFF, 0x87, 0x00, 0x86, 0x00, 0xBB, 0xFF, 0x88, 0x00, 0x51, 0x00, 0xBA, 0xFF, 0x34, 0x00, 0xB9, 0xFF, 0x31, 0x00, 0xA1, 0x00, 0xB8, 0xFF, 0x40, 0x00, 0x4A, 0x00, 0xA5, 0x00, 0xB6, 0xFF, 0xB7, 0xFF, 0xDE, 0x00, 0xB5, 0xFF, 0x8B, 0x00, 0x8C, 0x00, 0x84, 0x00, 0xB4, 0xFF, 0xB3, 0xFF, 0x33, 0x00, 0xB1, 0xFF, 0xB2, 0xFF, 0xAF, 0xFF, 0xB0, 0xFF, 0x8D, 0x00, 0x8A, 0x00, 0xA2, 0x00, 0xAE, 0xFF, 0x83, 0x00, 0x89, 0x00, 0xAD, 0xFF, 0x85, 0x00, 0xAC, 0xFF, 0x45, 0x00, 0xAB, 0xFF, 0x4F, 0x00, 0xA9, 0xFF, 0xAA, 0xFF, 0xA8, 0xFF, 0x39, 0x00, 0x35, 0x00, 0xA7, 0xFF, 0xA6, 0xFF, 0x6F, 0x00, 0x3B, 0x00, 0xA5, 0xFF, 0xA3, 0xFF, 0xA4, 0xFF, 0x46, 0x00, 0xA2, 0xFF, 0x4E, 0x00, 0xA1, 0xFF, 0x9F, 0xFF, 0xA0, 0xFF, 0x41, 0x00, 0x9E, 0xFF, 0x9D, 0xFF, 0x48, 0x00, 0x9B, 0xFF, 0x9C, 0xFF, 0x99, 0xFF, 0x9A, 0xFF, 0x37, 0x00, 0xA0, 0x00, 0x97, 0xFF, 0x98, 0xFF, 0x95, 0xFF, 0x96, 0xFF, 0x93, 0xFF, 0x94, 0xFF, 0x92, 0xFF, 0x3D, 0x00, 0x49, 0x00, 0x91, 0xFF, 0x8F, 0xFF, 0x90, 0xFF, 0x68, 0x00, 0x30, 0x00, 0x8D, 0xFF, 0x8E, 0xFF, 0x8C, 0xFF, 0x6E, 0x00, 0xB2, 0x00, 0x8B, 0xFF, 0xDA, 0x00, 0x8A, 0xFF, 0x50, 0x00, 0x64, 0x00, 0x89, 0xFF, 0x4B, 0x00, 0x87, 0xFF, 0x88, 0xFF, 0xD6, 0x00, 0x86, 0xFF, 0x84, 0xFF, 0x85, 0xFF, 0x82, 0xFF, 0x83, 0xFF, 0x81, 0xFF, 0xA6, 0x00, 0x43, 0x00, 0x80, 0xFF, 0x2D, 0x00, 0x7F, 0xFF, 0x38, 0x00, 0x7E, 0xFF, 0x7C, 0xFF, 0x7D, 0xFF, 0xBF, 0x00, 0x7B, 0xFF, 0xB0, 0x00, 0x01, 0x00, 0x65, 0x00, 0x7A, 0xFF, 0x79, 0xFF, 0xD5, 0x00, 0x78, 0xFF, 0xDD, 0x00, 0xAA, 0x00, 0xBD, 0x00, 0x77, 0xFF, 0xB6, 0x00, 0x76, 0xFF, 0xC4, 0x00, 0x36, 0x00, 0xCC, 0x00, 0x67, 0x00, 0xB1, 0x00, 0xA9, 0x00, 0x75, 0xFF, 0xB5, 0x00, 0xBC, 0x00, 0xC9, 0x00, 0xD7, 0x00, 0x74, 0xFF, 0xDB, 0x00, 0xAC, 0x00, 0xBB, 0x00, 0x6C, 0x00, 0x5D, 0x00, 0x73, 0xFF, 0xB3, 0x00, 0xCF, 0x00, 0xA3, 0x00, 0xA8, 0x00, 0x54, 0x00, 0x71, 0xFF, 0x72, 0xFF, 0x8E, 0x00, 0xCE, 0x00, 0x6F, 0xFF, 0x70, 0xFF, 0xB8, 0x00, 0xCA, 0x00, 0xD8, 0x00, 0xD9, 0x00, 0xAD, 0x00, 0x2F, 0x00, 0x6E, 0xFF, 0x57, 0x00, 0x6D, 0xFF, 0x53, 0x00, 0xAF, 0x00, 0xC5, 0x00, 0x2C, 0x00, 0xC7, 0x00, 0x5A, 0x00, 0x6C, 0xFF, 0x6A, 0x00, 0xC2, 0x00, 0xD3, 0x00, 0xA4, 0x00, 0xC1, 0x00, 0xC3, 0x00, 0x6B, 0xFF, 0xA7, 0x00, 0xB9, 0x00, 0xC6, 0x00, 0x42, 0x00, 0x6B, 0x00, 0xBE, 0x00, 0x4C, 0x00, 0xD0, 0x00, 0x6A, 0xFF, 0x69, 0xFF, 0xDF, 0x00, 0x44, 0x00, 0x58, 0x00, 0xC0, 0x00, 0x3E, 0x00, 0x68, 0xFF, 0x3A, 0x00, 0xD1, 0x00, 0x5F, 0x00, 0x67, 0xFF, 0x60, 0x00, 0x63, 0x00, 0xAE, 0x00, 0x66, 0xFF, 0xCD, 0x00, 0x65, 0xFF, 0xBA, 0x00, 0xB7, 0x00, 0x6D, 0x00, 0xB4, 0x00, 0x69, 0x00, 0x24, 0x00, 0xD2, 0x00, 0x5E, 0x00, 0x61, 0x00, 0x64, 0xFF, 0x02, 0x00, 0x63, 0xFF, 0xD4, 0x00, 0x3C, 0x00, 0x62, 0x00, 0xAB, 0x00, 0x62, 0xFF, 0x61, 0xFF, 0x5C, 0x00, 0x60, 0xFF, 0x59, 0x00, 0x2E, 0x00, 0x03, 0x00, 0x66, 0x00, 0xCB, 0x00, 0x5E, 0xFF, 0x5F, 0xFF, 0x1F, 0x00, 0x5D, 0xFF, 0x5B, 0xFF, 0x5C, 0xFF, 0x5A, 0xFF, 0x5B, 0x00, 0xC8, 0x00, 0x22, 0x00, 0x04, 0x00, 0x21, 0x00, 0x58, 0xFF, 0x59, 0xFF, 0x57, 0xFF, 0x23, 0x00, 0x05, 0x00, 0x56, 0xFF, 0x54, 0xFF, 0x55, 0xFF, 0x08, 0x00, 0x53, 0xFF, 0x52, 0xFF, 0x06, 0x00, 0x28, 0x00, 0x51, 0xFF, 0x29, 0x00, 0x50, 0xFF, 0x2A, 0x00, 0x72, 0x00, 0x26, 0x00, 0x4F, 0xFF, 0x4E, 0xFF, 0x07, 0x00, 0x0C, 0x00, 0x09, 0x00, 0x74, 0x00, 0x4D, 0xFF, 0x4B, 0xFF, 0x4C, 0xFF, 0x49, 0xFF, 0x4A, 0xFF, 0x1E, 0x00, 0x0B, 0x00, 0x48, 0xFF, 0x73, 0x00, 0x0A, 0x00, 0x47, 0xFF, 0x0D, 0x00, 0x46, 0xFF, 0x45, 0xFF, 0x70, 0x00, 0x43, 0xFF, 0x44, 0xFF, 0x75, 0x00, 0x41, 0xFF, 0x79, 0x00, 0x42, 0xFF, 0x3E, 0xFF, 0x3F, 0xFF, 0x0E, 0x00, 0x40, 0xFF, 0x3D, 0xFF, 0x25, 0x00, 0x3C, 0xFF, 0x0F, 0x00, 0x1D, 0x00, 0x11, 0x00, 0x13, 0x00, 0x12, 0x00, 0x7D, 0x00, 0x77, 0x00, 0x3B, 0xFF, 0x10, 0x00, 0x38, 0xFF, 0x39, 0xFF, 0x1C, 0x00, 0x3A, 0xFF, 0x1B, 0x00, 0x1A, 0x00, 0x76, 0x00, 0x27, 0x00, 0x71, 0x00, 0x19, 0x00, 0x14, 0x00, 0x78, 0x00, 0x17, 0x00, 0x15, 0x00, 0x16, 0x00, 0x7F, 0x00, 0x37, 0xFF, 0x2B, 0x00, 0x18, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
char DAT_ZENKAKU[0x194] = {0x80,0x5C,0x80,0x5D,0x80,0x43,0x80,0x5E,0x80,0x5F,0x80,0x60,0x80,0x61,0x80,0x62,0x80,0x63,0x80,0x64,0x80,0x65,0x80,0x66,0x80,0x67,0x80,0x68,0x80,0x69,0x80,0x6A,0x80,0x30,0x80,0x39,0x80,0x47,0x80,0x58,0x80,0x56,0x80,0x57,0x80,0x59,0x80,0x45,0x80,0x48,0x80,0x49,0x80,0x5A,0x80,0x50,0x80,0x31,0x80,0x40,0x80,0x34,0x80,0x41,0x80,0x6B,0x80,0x6C,0x80,0x6D,0x80,0x6E,0x80,0x6F,0x80,0xA0,0x80,0xA1,0x80,0xA2,0x80,0xA3,0x80,0xA4,0x80,0x36,0x80,0x37,0x80,0x53,0x80,0x52,0x80,0x54,0x80,0x38,0x80,0x5B,0x80,0xA5,0x80,0xA6,0x80,0xA7,0x80,0xA8,0x80,0xA9,0x80,0xAA,0x80,0xAB,0x80,0xAC,0x80,0xAD,0x80,0xAE,0x80,0xAF,0x80,0xB0,0x80,0xB1,0x80,0xB2,0x80,0xB3,0x80,0xB4,0x80,0xB5,0x80,0xB6,0x80,0xB7,0x80,0xB8,0x80,0xB9,0x80,0xBA,0x80,0xBB,0x80,0xBC,0x80,0xBD,0x80,0xBE,0x80,0x4A,0x80,0x55,0x80,0x4B,0x80,0x3C,0x80,0x3E,0x80,0x44,0x80,0xBF,0x80,0xC0,0x80,0xC1,0x80,0xC2,0x80,0xC3,0x80,0xC4,0x80,0xC5,0x80,0xC6,0x80,0xC7,0x80,0xC8,0x80,0xC9,0x80,0xCA,0x80,0xCB,0x80,0xCC,0x80,0xCD,0x80,0xCE,0x80,0xCF,0x80,0xD0,0x80,0xD1,0x80,0xD2,0x80,0xD3,0x80,0xD4,0x80,0xD5,0x80,0xD6,0x80,0xD7,0x80,0xD8,0x80,0x4C,0x80,0x42,0x80,0x4D,0x80,0x3D,0x80,0x30,0x80,0x30,0x80,0x32,0x80,0x4E,0x80,0x4F,0x80,0x31,0x80,0x35,0x82,0x45,0x81,0xA7,0x81,0xA9,0x81,0xAB,0x81,0xAD,0x81,0xAF,0x82,0x39,0x82,0x3B,0x82,0x3D,0x81,0xC9,0x80,0x40,0x81,0xA8,0x81,0xAA,0x81,0xAC,0x81,0xAE,0x81,0xB0,0x81,0xB1,0x81,0xB3,0x81,0xB5,0x81,0xB7,0x81,0xB9,0x81,0xBB,0x81,0xBD,0x81,0xBF,0x81,0xC1,0x81,0xC3,0x81,0xC5,0x81,0xC7,0x81,0xCA,0x81,0xCC,0x81,0xCE,0x81,0xD0,0x81,0xD1,0x81,0xD2,0x81,0xD3,0x81,0xD4,0x81,0xD5,0x81,0xD8,0x81,0xDB,0x81,0xDE,0x82,0x31,0x82,0x34,0x82,0x35,0x82,0x36,0x82,0x37,0x82,0x38,0x82,0x3A,0x82,0x3C,0x82,0x3E,0x82,0x3F,0x82,0x40,0x82,0x41,0x82,0x42,0x82,0x43,0x82,0x44,0x82,0x46,0x80,0x3A,0x80,0x3B,0x81,0xD7,0x81,0xDA,0x81,0xDD,0x82,0x30,0x82,0x33,0x81,0xB2,0x81,0xB4,0x81,0xB6,0x81,0xB8,0x81,0xBA,0x81,0xBC,0x81,0xBE,0x81,0xC0,0x81,0xC2,0x81,0xC4,0x81,0xC6,0x81,0xC8,0x81,0xCB,0x81,0xCD,0x81,0xCF,0x81,0xD6,0x81,0xD9,0x81,0xDC,0x81,0xDF,0x82,0x32,0x82,0x47};
char DAT_800d3ce9[0x193] =     {0x5C,0x80,0x5D,0x80,0x43,0x80,0x5E,0x80,0x5F,0x80,0x60,0x80,0x61,0x80,0x62,0x80,0x63,0x80,0x64,0x80,0x65,0x80,0x66,0x80,0x67,0x80,0x68,0x80,0x69,0x80,0x6A,0x80,0x30,0x80,0x39,0x80,0x47,0x80,0x58,0x80,0x56,0x80,0x57,0x80,0x59,0x80,0x45,0x80,0x48,0x80,0x49,0x80,0x5A,0x80,0x50,0x80,0x31,0x80,0x40,0x80,0x34,0x80,0x41,0x80,0x6B,0x80,0x6C,0x80,0x6D,0x80,0x6E,0x80,0x6F,0x80,0xA0,0x80,0xA1,0x80,0xA2,0x80,0xA3,0x80,0xA4,0x80,0x36,0x80,0x37,0x80,0x53,0x80,0x52,0x80,0x54,0x80,0x38,0x80,0x5B,0x80,0xA5,0x80,0xA6,0x80,0xA7,0x80,0xA8,0x80,0xA9,0x80,0xAA,0x80,0xAB,0x80,0xAC,0x80,0xAD,0x80,0xAE,0x80,0xAF,0x80,0xB0,0x80,0xB1,0x80,0xB2,0x80,0xB3,0x80,0xB4,0x80,0xB5,0x80,0xB6,0x80,0xB7,0x80,0xB8,0x80,0xB9,0x80,0xBA,0x80,0xBB,0x80,0xBC,0x80,0xBD,0x80,0xBE,0x80,0x4A,0x80,0x55,0x80,0x4B,0x80,0x3C,0x80,0x3E,0x80,0x44,0x80,0xBF,0x80,0xC0,0x80,0xC1,0x80,0xC2,0x80,0xC3,0x80,0xC4,0x80,0xC5,0x80,0xC6,0x80,0xC7,0x80,0xC8,0x80,0xC9,0x80,0xCA,0x80,0xCB,0x80,0xCC,0x80,0xCD,0x80,0xCE,0x80,0xCF,0x80,0xD0,0x80,0xD1,0x80,0xD2,0x80,0xD3,0x80,0xD4,0x80,0xD5,0x80,0xD6,0x80,0xD7,0x80,0xD8,0x80,0x4C,0x80,0x42,0x80,0x4D,0x80,0x3D,0x80,0x30,0x80,0x30,0x80,0x32,0x80,0x4E,0x80,0x4F,0x80,0x31,0x80,0x35,0x82,0x45,0x81,0xA7,0x81,0xA9,0x81,0xAB,0x81,0xAD,0x81,0xAF,0x82,0x39,0x82,0x3B,0x82,0x3D,0x81,0xC9,0x80,0x40,0x81,0xA8,0x81,0xAA,0x81,0xAC,0x81,0xAE,0x81,0xB0,0x81,0xB1,0x81,0xB3,0x81,0xB5,0x81,0xB7,0x81,0xB9,0x81,0xBB,0x81,0xBD,0x81,0xBF,0x81,0xC1,0x81,0xC3,0x81,0xC5,0x81,0xC7,0x81,0xCA,0x81,0xCC,0x81,0xCE,0x81,0xD0,0x81,0xD1,0x81,0xD2,0x81,0xD3,0x81,0xD4,0x81,0xD5,0x81,0xD8,0x81,0xDB,0x81,0xDE,0x82,0x31,0x82,0x34,0x82,0x35,0x82,0x36,0x82,0x37,0x82,0x38,0x82,0x3A,0x82,0x3C,0x82,0x3E,0x82,0x3F,0x82,0x40,0x82,0x41,0x82,0x42,0x82,0x43,0x82,0x44,0x82,0x46,0x80,0x3A,0x80,0x3B,0x81,0xD7,0x81,0xDA,0x81,0xDD,0x82,0x30,0x82,0x33,0x81,0xB2,0x81,0xB4,0x81,0xB6,0x81,0xB8,0x81,0xBA,0x81,0xBC,0x81,0xBE,0x81,0xC0,0x81,0xC2,0x81,0xC4,0x81,0xC6,0x81,0xC8,0x81,0xCB,0x81,0xCD,0x81,0xCF,0x81,0xD6,0x81,0xD9,0x81,0xDC,0x81,0xDF,0x82,0x32,0x82,0x47 };


void FUN_decodeHuffman(char* inHuffString, char* outASCII, bool JAP)
{
    char* ptrToHuffmanTable;

    if (JAP)
        ptrToHuffmanTable = DAT_MISCJ;
    else
        ptrToHuffmanTable = DAT_MISC;

    int bVar1;
    int iVar2;
    int iVar3;
    unsigned int uVar4;
    int iVar5;
    int iVar6;
    int iVar7;
    int iVar8;
    short sVar9;
    short sVar10;
    unsigned short local_18[120];
    int DBG;

    iVar6 = -1;
    sVar10 = 0;
    sVar9 = 1;
    bVar1 = *inHuffString & 0xFF;
    iVar5 = 0;
    if (bVar1 != 0) {
        iVar2 = -0x10000;
        iVar7 = 0;
        do {
            if (iVar2 < 0) {
                sVar10 = sVar9 + 1;
                uVar4 = (unsigned int)inHuffString[sVar9];
                iVar6 = 7;
                iVar3 = 0;
                iVar2 = 0;
                do {
                    int DBGlength = (unsigned short)uVar4 & 1;

                    *(unsigned short*)(local_18 + (iVar2 >> 0xf)) = (unsigned short)uVar4 & 1;
                    uVar4 = (int)(uVar4 << 0x10) >> 0x11;
                    iVar3 = iVar3 + 1;
                    iVar2 = iVar3 * 0x10000;
                    sVar9 = sVar10;
                } while (iVar3 * 0x10000 >> 0x10 < 8);
            }
            iVar2 = iVar6 << 0x10;
            iVar3 = iVar5 << 0x10;

            int DBGLocal18Index = iVar2 >> 0xf;
            int DBGHuffIndex = *(short*)(local_18 + (iVar2 >> 0xf)) * 2 + (iVar3 >> 0xe);

            iVar5 = (int)*(short*)(ptrToHuffmanTable +
                *(short*)(local_18 + (iVar2 >> 0xf)) * 2 + (iVar3 >> 0xe));
            iVar6 = iVar6 + -1;
            if (iVar5 < 0) {
                if (iVar5 < 0) {
                    iVar5 = -iVar5;
                }
                iVar3 = iVar7 << 0x10;
                iVar8 = iVar7;
            }
            else {
                iVar8 = iVar7 + 1;
                outASCII[iVar7] =
                    (char)*(short*)(ptrToHuffmanTable +
                        *(short*)(local_18 + (iVar2 >> 0xf)) * 2 + (iVar3 >> 0xe));
                iVar5 = 0;
                iVar3 = iVar8 * 0x10000;
            }
            sVar10 = (short)iVar8;
            iVar2 = iVar6 * 0x10000;
            iVar7 = iVar8;
        } while (iVar3 >> 0x10 < (int)(unsigned int)bVar1);
    }
    outASCII[sVar10] = 0;

    //for (int i = 0; i < inHuffString[0]; i++)
    //    printf("%X ", outASCII[i] & 0xff);
    return;
}

void packBitfields(uint32_t* bitfields, uint8_t* lengths, size_t count, uint8_t* output, size_t* output_size) {
    int output_index = 0;
    uint8_t current_byte = 0;
    int current_bit_count = 0;

    for (int i = 0; i < count; i++) {
        uint32_t field = bitfields[i];
        int field_length = lengths[i];

        while (field_length > 0) {
            int bits_to_copy = 8 - current_bit_count;
            if (bits_to_copy > field_length) {
                bits_to_copy = field_length;
            }

            // Align the incoming bits to the leftmost position
            uint8_t shifted_bits = (field >> (field_length - bits_to_copy)) << (8 - current_bit_count - bits_to_copy);

            // Combine with the current byte
            current_byte |= shifted_bits;

            // Update counters
            current_bit_count += bits_to_copy;
            field_length -= bits_to_copy;
            field &= (1 << field_length) - 1; // Mask out the used bits

            // If the byte is full, store it and reset
            if (current_bit_count == 8) {
                output[output_index++] = current_byte;
                current_byte = 0;
                current_bit_count = 0;
            }
        }
    }

    // If there's any remaining bits, store them as a full byte
    if (current_bit_count > 0) {
        output[output_index++] = current_byte;
    }

    *output_size = output_index;
}


int FUN_encodeHuffman(String inASCIIString, uint8_t* outHuff)
{
    //06 04 F7 FB 9D E7 E0=MONK
    //String inString = "MONK";
    String inString = inASCIIString;

    uint32_t bitfields[0x1000];
    uint8_t lengths[0x1000];
    uint32_t outBitPattern;
    uint8_t outBitPatternLength;
    int strLength = inString.length();

    for (int i = 0; i < strLength; i++)
    {
        if (getHuffCodeFromCharacter(inString[i], &outBitPattern, &outBitPatternLength) == 0)
        {
            bitfields[i] = outBitPattern;
            lengths[i] = outBitPatternLength;
        }
        else
            return 1;
    }
    size_t count = inString.length();
    //uint8_t output[bufSize] = { 0 }; // Output array to hold the packed bytes
    size_t output_size = 0; // Size of the packed output

    packBitfields(bitfields, lengths, count, outHuff + 2, &output_size);
    outHuff[0] = output_size + 1;
    outHuff[1] = inString.length();

    /*
    printf("Packed output:\n");
    for (size_t i = 0; i < output_size + 2; i++) {
        printf("0x%02X ", outHuff[i]);
    }
    printf("\n");
    */

    return 0;
}

int examplePackBitfields() {
    //06 04 F7 FB 9D E7 E0=MONK
    uint32_t bitfields[] = { 0b1111011111, 0b111011100, 0b1110111100, 0b11111100000 }; // Example bitfield values
    uint8_t lengths[] = { 10, 9, 10, 11 }; // Corresponding lengths of bitfields

    size_t count = sizeof(bitfields) / sizeof(bitfields[0]);
    uint8_t output[16] = { 0 }; // Output array to hold the packed bytes
    size_t output_size = 0; // Size of the packed output

    packBitfields(bitfields, lengths, count, output, &output_size);

    printf("Packed output:\n");
    for (size_t i = 0; i < output_size; i++) {
        printf("0x%02X ", output[i]);
    }
    printf("\n");

    return 0;
}



//always being called with flag=0
void FUN_ASCIItoZENKAKU(char* input, char* output, int flag)

{
    char bVar1;
    int iVar2;
    char* pbVar3;
    unsigned int uVar4;
    int outIndex = 0;

    /* this function takes an ASCII value as input, looks up the position in
       ZANKAKU.TBL and outputs the 2-byte code from the table (e.g. 0x8031) */
LAB_8006cb84:
    while (true) {
        pbVar3 = input;
        bVar1 = *pbVar3;
        uVar4 = (unsigned int)bVar1;
        input = pbVar3 + 1;
        if (uVar4 == 0) {
            //*output = 0;
            return;
        }
        if ((flag == 0) || (uVar4 != 0x20)) break;
        *output = bVar1;
        output = output + 1;
    }
    if (0x1f < uVar4 - 0x80) goto LAB_8006cbdc;
    *output = bVar1;
    bVar1 = *input;
    input = pbVar3 + 2;
    goto LAB_8006cca0;
LAB_8006cbdc:
    iVar2 = uVar4 - 0x10;
    if ((0x6f < uVar4 - 0x10) && (0x3f < uVar4 - 0xa0)) goto LAB_8006cb84;
    if (0x5f < iVar2) {
        iVar2 = uVar4 - 0x30;
    }
    if (*input == 0xde) {
        if (uVar4 - 0xb6 < 0xf) {
            iVar2 = iVar2 + 0x2f;
        }
        else if (uVar4 - 0xca < 5) {
            iVar2 = iVar2 + 0x2a;
        }
        else {
            if (uVar4 != 0xb3) goto LAB_8006cc70;
            iVar2 = iVar2 + 0x46;
        }
    }
    else {
        if ((*input != 0xdf) || (4 < uVar4 - 0xca)) goto LAB_8006cc70;
        iVar2 = iVar2 + 0x16;
    }
    input = pbVar3 + 2;
LAB_8006cc70:
    output[outIndex] = DAT_ZENKAKU[iVar2 * 2];
    bVar1 = DAT_800d3ce9[iVar2 * 2];
LAB_8006cca0:
    output[outIndex + 1] = bVar1;
    outIndex = outIndex + 2;
    goto LAB_8006cb84;
}