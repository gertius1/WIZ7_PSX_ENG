/*
  ==============================================================================

    HuffmanTable.cpp
    Created: 17 Aug 2024 3:37:53pm
    Author:  Zaq

  ==============================================================================
*/

#include "HuffmanTable.h"
const int nrOfHuffmanChars = 122;

uint32_t HuffmanTable[nrOfHuffmanChars][3] =
{
    //char, huffBitPatterns, lengthOfBitParttern
    {0x20, 0b0,1},
    {0x65, 0b1000,4},
    {0x74, 0b1001,4},
    {0x6f, 0b10100,5},
    {0x61, 0b10101,5},
    {0x6e, 0b101100,6},
    {0x73, 0b101101,6},
    {0x69, 0b1011100,7},
    {0x72, 0b1011101,7},
    {0x68, 0b1011110,7},
    {0x6c, 0b1011111,7},
    {0x2e, 0b11000,5},
    {0x64, 0b11001,5},
    {0x75, 0b110100,6},
    {0x66, 0b110101,6},
    {0x63, 0b1101100,7},
    {0x67, 0b1101101,7},
    {0x79, 0b11011100,8},
    {0x6d, 0b11011101,8},
    {0x70, 0b110111100,9},
    {0x77, 0b110111101,9},
    {0x45, 0b110111110,9},
    {0x54, 0b110111111,9},
    {0x41, 0b111000,6},
    {0x2c, 0b111001,6},
    {0x62, 0b1110100,7},
    {0x53, 0b1110101,7},
    {0x49, 0b11101100,8},
    {0x52, 0b11101101,8},
    {0x4f, 0b111011100,9},
    {0x6b, 0b111011101,9},
    {0x4e, 0b1110111100,10},
    {0x76, 0b1110111101,10},
    {0x21, 0b1110111110,10},
    {0x48, 0b1110111111,10},
    {0x4c, 0b1111000,7},
    {0x25, 0b1111001,7},
    {0x26, 0b11110100,8},
    {0x44, 0b11110101,8},
    {0x5d, 0b111101100,9},
    {0x43, 0b111101101,9},
    {0x2d, 0b1111011100,10},
    {0x55, 0b1111011101,10},
    {0x40, 0b1111011110,10},
    {0x4d, 0b1111011111,10},
    {0x59, 0b11111000,8},
    {0x47, 0b11111001,8},
    {0x50, 0b111110100,9},
    {0x42, 0b111110101,9},
    {0x57, 0b1111101100,10},
    {0x46, 0b1111101101,10},
    {0x27, 0b1111101110,10},
    {0x01, 0b1111101111,10},
    {0x4b, 0b111111000,9},
    {0x2f, 0b111111001,9},
    {0x3f, 0b1111110100,10},
    {0x56, 0b1111110101,10},
    {0x7a, 0b11111101100,11},
    {0x24, 0b11111101101,11},
    {0x02, 0b111111011100,12},
    {0x71, 0b111111011101,12},
    {0x30, 0b1111110111100,13},
    {0x3a, 0b1111110111101,13},
    {0x78, 0b1111110111110,13},
    {0x23, 0b1111110111111,13},
    {0x22, 0b1111111000,10},
    {0x03, 0b1111111001,10},
    {0x6a, 0b11111110100,11},
    {0x2a, 0b11111110101,11},
    {0x1f, 0b111111101100,12},
    {0x58, 0b111111101101,12},
    {0x05, 0b1111111011100,13},
    {0x5e, 0b1111111011101,13},
    {0x31, 0b11111110111100, 14},
    {0x4a, 0b11111110111101, 14},
    {0x29, 0b11111110111110, 14},
    {0x28, 0b11111110111111, 14},
    {0x04, 0b11111111000,11},
    {0x08, 0b11111111001,11},
    {0x06, 0b111111110100,12},
    {0x32, 0b111111110101,12},
    {0x35, 0b1111111101100,13},
    {0x5a, 0b1111111101101,13},
    {0x0c, 0b11111111011100, 14},
    {0x51, 0b11111111011101, 14},
    {0x5f, 0b11111111011110, 14},
    {0x34, 0b11111111011111, 14},
    {0x7e, 0b111111111000,12},
    {0x0a, 0b111111111001,12},
    {0x33, 0b1111111110100,13},
    {0x07, 0b1111111110101,13},
    {0x09, 0b11111111101100, 14},
    {0x38, 0b11111111101101, 14},
    {0x0b, 0b11111111101110, 14},
    {0x36, 0b11111111101111, 14},
    {0x37, 0b1111111111000,13},
    {0x0f, 0b1111111111001,13},
    {0x39, 0b11111111110100, 14},
    {0x1e, 0b11111111110101, 14},
    {0x3b, 0b11111111110110, 14},
    {0x0d, 0b11111111110111, 14},
    {0x2b, 0b11111111111000, 14},
    {0x0e, 0b11111111111001, 14},
    {0x12, 0b111111111110100 ,15},
    {0x11, 0b111111111110101, 15},
    {0x14, 0b111111111110110, 15},
    {0x10, 0b111111111110111, 15},
    {0x5b, 0b111111111111000, 15},
    {0x13, 0b111111111111001, 15},
    {0x7d, 0b1111111111110100, 16},
    {0x7c, 0b1111111111110101, 16},
    {0x1d, 0b1111111111110110, 16},
    {0x3d, 0b1111111111110111, 16},
    {0x1b, 0b1111111111111000, 16},
    {0x1a, 0b1111111111111001, 16},
    {0x19, 0b1111111111111010, 16},
    {0x15, 0b1111111111111011, 16},
    {0x3e, 0b1111111111111100, 16},
    {0x16, 0b1111111111111101, 16},
    {0x7f, 0b1111111111111110, 16},
    {0x1c, 0b11111111111111110, 17},
    {0x17, 0b11111111111111111, 17}
    
};

int getHuffCodeFromCharacter(char ASCIIChar, uint32_t* outBitPattern, uint8_t* outBitPatternLength)
{
    for (int i = 0; i < nrOfHuffmanChars; i++)
    {
        if (HuffmanTable[i][0] == (int)ASCIIChar)
        {
            *outBitPattern = HuffmanTable[i][1];
            *outBitPatternLength = (uint8_t)HuffmanTable[i][2];
            return 0;
        }
    }
    return 1;
}